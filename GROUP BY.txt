GROUP BY

Even  ore Aliasing
Q1. Get the percentage of people who are no longer alive. Alias the result as percentage_dead. Remember to use 100.0 and not 100!
-- get the count(deathdate) and multiply by 100.0
-- then divide by count(*)

SELECT COUNT(deathdate)*100.0/count(*) As Percentage_dead
From people;
 
Q.2 Get the number of years between the newest film and oldest film. Alias the result as difference.
Select  max(release_year)- min(release_year) As difference
from films

q.3 Get the number of decades the films table covers. Alias the result as number_of_decades. The top half of your fraction should be enclosed in parentheses.

Select (max(release_year)-min(release_year))/10.0 As number_of_decades
FROM films;


Chapter 4
Order by 
Sorting single column
Q.1Get the names of people from the people table, sorted alphabetically.

SELECT name
FROM people
ORDER BY name Asc;


Q.2 Get the names of people, sorted by birth date.
SELECT name
FROM people
ORDER BY birthdate;

Q.3 Get the birth date and name for every person, in order of when they were born.
 SELECT birthdate, name
FROM people
ORDER BY birthdate;





Q.4 Get the title of films released in 2000 or 2012, in the order they were released.


SELECT TITLE
FROM films
WHERE release_year =2000 or release_year = 2012
ORDER BY release_year

Q.5 Get all details for all films except those released in 2015 and order them by duration.
Select *
FROM films
WHERE release_year== 2015
ORDER BY duration;

Q.6 Get the title and gross earnings for movies which begin with the letter 'M' and order the results alphabetically.

SELECT title, gross
FROM films
WHERE title like 'M%'
ORDER BY title;

Sorting single column (Desc)
Q.1Get the IMDB score and film ID for every film from the reviews table, sorted from highest to lowest score.

SELECT imdb_score, film_id
from reviews
ORDER BY imdb_score desc;

Q.2 Get the title for every film, in reverse order.

SELECT title
FROM films
ORDER BY title desc;

Q.3 Get the title and duration for every film, in order of longest duration to shortest.

SELECT title, duration
FROM films
ORDER BY duration DESC;

SORTING MULTIPLE COLUMNS

Q.1 Get the birth date and name of people in the people table, in order of when they were born and alphabetically by name.
SELECT birthdate, name
FROM people
ORDER BY birthdate, name

Q.2 Get the release year, duration, and title of films ordered by their release year and duration.

SELECT release_year, duration, title
FROM films
ORDER BY release_year, duration

Q.3 Get certifications, release years, and titles of films ordered by certification (alphabetically) and release year.
SELECT certification, release_year, title
FROM films
ORDER BY certification ASC, release_year

Q.4 Get the names and birthdates of people ordered by name and birth date.
SELECT name, birthdate
FROM people
ORDER BY name, birthdate


Group by 

Q.1 Get the release year and count of films released in each year.

SELECT release_year, count(*)
FROM films
GROUP BY release_year;

Q.2 Get the release year and average duration of all films, grouped by release year.


SELECT release_year, count(*)
FROM films
GROUP BY release_year;


Q.3 Get the release year and largest budget for all films, grouped by release year.

SELECT release_year, max(budget)
FROM films
GROUP BY release_year

Q.4 Get the IMDB score and count of film reviews grouped by IMDB score in the reviews table.


SELECT imdb_score, count(reviews)
FROM reviews
GROUP BY imdb_score

Q.5 Get the release year and lowest gross earnings per release year.

SELECT release_year, min(gross)
FROM films
GROUP BY release_year
ORDER BY release_year

Q.6 Get the language and total gross amount films in each language made.

SELECT language, sum(gross)
FROM films
GROUP BY language
ORDER BY language

Q.7 Get the country and total budget spent making movies in each country.

SELECT country, sum(budget)
FROM films
GROUP BY country
ORDER BY country

Q.8 Get the release year, country, and highest budget spent making a film for each year, for each country. Sort your results by release year and country.

SELECT release_year, country, max(budget)
FROM films
GROUP BY release_year, country
ORDER BY release_year, country

Q.9 Get the country, release year, and lowest amount grossed per release year per country. Order your results by country and release year.


SELECT country, release_year, min(gross)
FROM films
GROUP BY country, release_year
ORDER  BY country, release_year


Having 

Get the release year, budget and gross earnings for each film in the films table.

SELECT release_year, budget, gross
FROM films
ORDER BY films

Modify your query so that only records with a release_year after 1990 are included.

SELECT release_year
FROM films
WHERE release_year > 1990;

Remove the budget and gross columns, and group your results by release year.
SELECT release_year,
FROM films
WHERE release_year > 1990
GROUP BY release_year;


Modify your query to include the average budget and average gross earnings for the results you have so far. Alias the average budget as avg_budget; alias the average gross earnings as avg_gross.



SELECT release_year, AVG(budget) AS avg_budget, AVG(gross) AS avg_gross
FROM films
WHERE release_year > 1990
GROUP BY release_year;


Modify your query so that only years with an average budget of greater than $60 million are included.
SELECT release_year, AVG(budget) AS avg_budget, avg(gross) As avg_gross
FROM films
GROUP BY release_year
HAVING avg(budget) > 60000000

Finally, modify your query to order the results from highest average gross earnings to lowest.

SELECT release_year, AVG(budget) AS avg_budget, AVG(gross) AS avg_gross
FROM films
GROUP BY release_year
HAVING AVG(budget) >60000000
ORDER BY avg(gross) DESC;


Get the country, average budget, and average gross take of countries that have made more than 10 films. Order the result by country name, and limit the number of results displayed to 5. You should alias the averages as avg_budget and avg_gross respectively.

SELECT country, avg(budget) AS avg_budget, avg(gross) As avg_gross
FROM films
Group by country
Having count(title)> 10
order by country
limit 5




Joining data in SQL
Perform an inner join with the cities table on the left and the countries table on the right; do not alias tables here or in the next step.
SELECT * 
FROM cities
-- Inner join to countries
INNER JOIN countries
-- Match on country codes
on countries.code = cities.country_code


Complete the SELECT statement to keep only the name of the city, the name of the country, and the region the country is located in (in the order specified).
Alias the name of the city AS city and the name of the country As country

-- Select name fields (with alias) and region 
SELECT cities.name AS city, countries.name as country, region 
FROM cities
INNER JOIN countries
ON countries.code = cities.country_code;

Start with your inner join in line 5; join the tables countries AS c (left) with economies (right), aliasing economies AS e.
Next, use code as your joining field in line 7; do not use the USING command here.
Lastly, select the following columns in order in line 2: code from the countries table (aliased as country_code), name, year, and inflation_rate.

-- Select fields with aliases
Select c.code as country_code, name, year, inflation_rate
FROM countries AS c
-- Join to economies (alias e)
Join economies as e
-- Match on code field using table aliases
on e.code = c.code

In the previous exercises, you performed your joins using the ON keyword. Recall that when both the field names being joined on are the same, you can take advantage of the USING clause.

You'll now explore the languages table from our database. Which languages are official languages, and which ones are unofficial?

You'll employ USING to simplify your query as you explore this question.

SELECT c.name AS country, l.name AS language, official
FROM countries AS c
INNER JOIN languages AS l
-- Match using the code column
USING (code)




Start with the join statement in line 6; perform an inner join with the countries table as c on the left with the languages table as l on the right.
Make use of the USING keyword to join on code in line 8.
Lastly, in line 2, select the country name, aliased as country, and the language name, aliased as language.

-- Select country and language names, aliased
Select c.name As country, l.name As language
-- From countries (aliased)
from countries AS c
-- Join to languages (aliased)
inner join languages As l
-- Use code as the joining field with the USING keyword
Using (code)


Rearrange the SELECT statement so that the language column appears on the left and the country column on the right.
Sort the results by language.

-- Rearrange SELECT statement, keeping aliases
SELECT l.name as language, c.name as country
FROM languages AS l
INNER JOIN countries AS c
USING(code)
-- Order the results by language
Order by language


Perform an inner join of countries AS c (left) with populations AS p (right), on code.
Select name, year and fertility_rate.


Perform an inner join of countries AS c (left) with populations AS p (right), on code.
Select name, year and fertility_rate.
-- Select fields
SELECT name, p.year, fertility_rate, e.year, unemployment_rate
FROM countries AS c
INNER JOIN populations AS p
ON c.code = p.country_code
-- Join to economies (as e)
inner join economies As e
-- Match on country code
using (code)


Modify your query so that you are joining to economies on year as well as code.

-- Select fields
SELECT name, p.year, fertility_rate, e.year, unemployment_rate
FROM countries AS c
INNER JOIN populations AS p
ON c.code = p.country_code
-- Join to economies (as e)
inner join economies As e
-- Match on country code
using (code)



Inner join 

Perform an inner join with cities AS c1 on the left and countries as c2 on the right.
Use code as the field to merge your tables on
SELECT 
	c1.name AS city, 
    code, 
    c2.name AS country,
    region, 
    city_proper_pop
FROM cities AS c1
-- Join right table (with alias)
___
ON c1.country_code = c2.code
ORDER BY code DESC;


Change the code to perform a LEFT JOIN instead of an INNER JOIN.
After executing this query, have a look at how many records the query result contains.


SELECT 
	c1.name AS city, 
    code, 
    c2.name AS country,
    region, 
    city_proper_pop
FROM cities AS c1
-- Join right table (with alias)
left join countries AS c2
ON c1.country_code = c2.code
ORDER BY code DESC;


Complete the LEFT JOIN with the countries table on the left and the economies table on the right on the code field.
Filter the records from the year 2010.


SELECT name, region, gdp_percapita
FROM countries AS c
LEFT JOIN economies AS e
-- Match on code fields
using (code)
-- Filter for the year 2010
where year > 2010;





Complete the LEFT JOIN with the countries table on the left and the economies table on the right on the code field.
Filter the records from the year 2010.

SELECT name, region, gdp_percapita
FROM countries AS c
LEFT JOIN economies AS e
-- Match on code fields
USING(code)
-- Filter for the year 2010
WHERE year = 2010;


To calculate per capita GDP per region, begin by grouping by region.
After your GROUP BY, choose region in your SELECT statement, followed by average GDP per capita using the AVG() function, with AS avg_gdp as your alias.

-- Select region, and average gdp_percapita as avg_gdp
Select c.region, avg(gdp_percapita) As avg_gdp
FROM countries AS c
LEFT JOIN economies AS e
USING(code)
WHERE year = 2010
-- Group by region
GROUP BY region;






Order the result set by the average GDP per capita from highest to lowest.
Return only the first 10 records in your result.

SELECT region, AVG(gdp_percapita) AS avg_gdp
FROM countries AS c
LEFT JOIN economies AS e
USING(code)
WHERE year = 2010
GROUP BY region
-- Order by descending avg_gdp
Order by avg_gdp Desc
-- Return only first 10 records
Limit 10

Right join


Write a new query using RIGHT JOIN that produces an identical result to the LEFT JOIN provided.

-- Modify this query to use RIGHT JOIN instead of LEFT JOIN
SELECT countries.name AS country, languages.name AS language, percent
FROM Languages
RIGHT JOIN countries
USING(code)
ORDER BY language;



Full Outer join = Full Join 
Perform a full join with countries (left) and currencies (right).
Filter for the North America region or NULL country names.

SELECT name AS country, code, region, basic_unit
FROM countries
-- Join to currencies
Full Join currencies
USING (code)
-- Where region is North America or name is null
WHERE region = 'North America' or name is null
ORDER BY region 


TWO Joins 
Complete the FULL JOIN with countries as c1 on the left and languages as l on the right, using code to perform this join.
Next, chain this join with another FULL JOIN, placing currencies on the right, joining on code again.

SELECT 
	c1.name AS country, 
    region, 
    l.name AS language,
	basic_unit, 
    frac_unit
FROM countries as c1 
-- Full join with languages (alias as l)
FULL JOIN languages As l
using (code)
-- Full join with currencies (alias as c2)
FULL JOIN currencies As C2
Using (code)
Where region like 'M%esia'



Cross Join and Inner JOin 
Well done getting to know all about CROSS JOIN! As you have learned, CROSS JOIN can be incredibly helpful when asking questions that involve looking at all possible combinations or pairings between two sets of data.

Imagine you are a researcher interested in the languages spoken in two countries: Pakistan and India. You are interested in asking:

What are the languages presently spoken in the two countries?
Given the shared history between the two countries, what languages could potentially have been spoken in either country over the course of their history?
In this exercise, we will explore how INNER JOIN and CROSS JOIN can help us answer these two questions, respectively.
Complete the code to perform an INNER JOIN of countries AS c with languages AS l using the code field to obtain the languages currently spoken in the two countries.
SELECT c.name AS country, l.name AS language
-- Inner join countries as c with languages as l on code
From countries AS c
Inner JOin languages As L
Using (code)
WHERE c.code IN ('PAK','IND')
	AND l.code in ('PAK','IND');



Change your INNER JOIN to a different kind of join to look at possible combinations of languages that could have been spoken in the two countries given their history.
Observe the differences in output for both joins.
SELECT c.name AS country, l.name AS language
FROM countries AS c        
-- Perform a cross join to languages (alias as l)
Cross JOIN Languages As L
WHERE c.code in ('PAK','IND')
	AND l.code in ('PAK','IND');

Complete the join of countries AS c with populations as p.
Filter on the year 2010.
Sort your results by life expectancy in ascending order.
Limit the result to five countries.


SELECT 
	c.name AS country,
    region,
    life_expectancy AS life_exp
FROM countries AS c
-- Join to populations (alias as p) using an appropriate join
Full join populations As P
ON c.code = p.country_code
-- Filter for only results in the year 2010
where year = 2010
-- Sort by life_exp
order by life_expectancy ASC
-- Limit to five records
Limit 5;

Perform an inner join of populations with itself ON country_code, aliased p1 and p2 respectively.
Select the country_code from p1 and the size field from both p1 and p2, aliasing p1.size as size2010 and p2.size as size2015 (in that order).
-- Select aliased fields from populations as p1
Select p1.country_code,p1.size As size2010, p2.size As size2015
from populations As p1
-- Join populations as p1 to itself, alias as p2, on country code
inner join populations As p2
on p1.country_code = p2.country_code


Since you want to compare records from 2010 and 2015, eliminate unwanted records by extending the WHERE statement to include only records where the p1.year matches p2.year - 5.

SELECT 
	p1.country_code, 
    p1.size AS size2010, 
    p2.size AS size2015
FROM populations AS p1
INNER JOIN populations AS p2
ON p1.country_code = p2.country_code
WHERE p1.year = 2010
-- Filter such that p1.year is always five years before p2.year
    And p1.year = p2.year -5;


Intersect 
-- Return all cities with the same name as a country
select name
from cities
intersect
select name
from countries;


Multiple where 
you've learned about semi joins in the form of nested subqueries within the WHERE clause of the main query. In this exercise, you'll familiarize yourself with semi join syntax by thinking through and re-ordering the lines of code provided. Note that subqueries are queries in their own right, so they can have a WHERE clause of their own! This is why you see two WHERE statements here.

Your task is to construct a semi join that pulls all records from economies2019 where gross_savings in the economies2015 table were below the 2015 global average. The global average gross_savings in 2015 was 22.5, and is already pre-calculated in the lines of code provided.

Create a semi join out of the two queries you've written, which filters unique languages returned in the first query for only those languages spoken in the 'Middle East'.


SELECT DISTINCT name
FROM languages
-- Add syntax to use bracketed subquery below as a filter
where  code in 
    (SELECT code
    FROM countries
    WHERE region = 'Middle East')
ORDER BY name;

WHERE do people live?
In this exercise, you will strengthen your knowledge of subquerying by identifying capital cities in order of largest to smallest population.

Follow the instructions below to get the urban area population for capital cities only. You'll use the countries and cities tables displayed in the console to help identify columns of interest as you build your query.

-- Select relevant fields from cities table
Select name, country_code, urbanarea_pop 
from cities
-- Filter using a subquery on the countries table
WHERE name in
(Select capital
from countries)
ORDER BY urbanarea_pop DESC;



Now, build on your query to complete your anti join, by adding an additional filter to return every country code that is not included in the currencies table.


SELECT code, name
FROM countries
WHERE continent = 'Oceania'
-- Filter for countries not included in the bracketed subquery
  And code not in
    (SELECT code
    FROM currencies);



Write a LEFT JOIN with countries on the left and the cities on the right, joining on country code.
In the SELECT statement of your join, include country names as country, and count the cities in each country, aliased as cities_num.
Sort by cities_num (descending), and country (ascending), limiting to the first nine records.

-- Find top nine countries with the most cities
Select countries.name As Country, count(cities.name) As cities_num
from countries 
left join cities 
on countries.code = cities.country_code
-- Order by count of cities as cities_num
group by countries.name
order by cities_num desc, country 
limit 9 

SELECT countries.name AS country,
-- Subquery that provides the count of cities   
  (SELECT count(name)
   FROM cities
   WHERE countries.code = cities.country_code)AS cities_num
FROM countries
ORDER BY cities_num DESC, country
LIMIT 9;



Subquery inside FROM
Subqueries inside FROM can help select columns from multiple tables in a single query.

Say you are interested in determining the number of languages spoken for each country. You want to present this information alongside each country's local_name, which is a field only present in the countries table and not in the languages table. You'll use a subquery inside FROM to bring information from these two tables together!


elect local_name from countries, with the aliased lang_num from your subquery (which has been nested and aliased for you as sub).
Use WHERE to match the code field from countries and sub.
-- Select local_name and lang_num from appropriate tables
Select local_name, sub.lang_num
From countries,
  (SELECT code, COUNT(*) AS lang_num
  FROM languages
  GROUP BY code) AS sub
-- Where codes match
where countries.code = sub.code
ORDER BY lang_num DESC;


Select country code, inflation_rate, and unemployment_rate from economies.
Filter code for the set of countries which do not contain the words "Republic" or "Monarchy" in their gov_form.
-- Select relevant fields
-- Select relevant fields
select code, inflation_rate, unemployment_rate
from economies
WHERE year = 2015 
  AND code NOT IN
-- Subquery returning country codes filtered on gov_form
	(select code
  from countries
  where gov_form like '%Republic%' or gov_form like '%Monarchy%')
ORDER BY inflation_rate;


you've made it to the final challenge problem! Get ready to tackle this step-by-step.

Your task is to determine the top 10 capital cities in Europe and the Americas by city_perc, a metric you'll calculate. city_perc is a percentage that calculates the "proper" population in a city as a percentage of the total population in the wider metro area, as follows:

city_proper_pop / metroarea_pop * 100

Do not use table aliasing in this exercise.

-- Select fields from cities
Select name, country_code, city_proper_pop, metroarea_pop, city_proper_pop/metroarea_pop*100 As city_perc
from cities
-- Use subquery to filter city name
where name in 
(select capital
from countries
where (continent = 'Europe' or continent like '%America%'))
-- Add filter condition such that metroarea_pop does not have null values
And metroarea_pop is not null
-- Sort and limit the result
order by city_perc desc
limit 10




-- Identify the correct constraint name
SELECT constraint_name, table_name, constraint_type
FROM information_schema.table_constraints
WHERE constraint_type = 'FOREIGN KEY';